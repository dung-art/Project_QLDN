package com.WebOfNVD.User.Service;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.WebOfNVD.Common.Response.FailResponse;
import com.WebOfNVD.Common.Response.SuccessMessageResponse;
import com.WebOfNVD.Common.Response.SuccessResponse;
import com.WebOfNVD.Product.Dto.ProductDto;
import com.WebOfNVD.Product.Dto.UpdateProductResponse;
import com.WebOfNVD.Product.Entity.Product;
import com.WebOfNVD.Product.Map.MapProduct;
import com.WebOfNVD.User.Dto.CreateUserResponse;
import com.WebOfNVD.User.Dto.SystemUser.CreateSystemUserRequest;
import com.WebOfNVD.User.Dto.SystemUser.ListSystemUserCode;
import com.WebOfNVD.User.Dto.SystemUser.SystemUserDto;
import com.WebOfNVD.User.Dto.SystemUser.UpdateSystemUserRequest;
import com.WebOfNVD.User.Entity.SystemUser;
import com.WebOfNVD.User.Repo.SystemUserRepo;
import com.googlecode.jmapper.JMapper;

@Service
@Transactional
public class SystemUserServiceImpl implements SystemUserService{
	@Autowired
	SystemUserRepo systemUserRepo;

	private JMapper<SystemUserDto, SystemUser> mapper = new JMapper<>(SystemUserDto.class, SystemUser.class);
	private JMapper<SystemUser, CreateSystemUserRequest> cmapper = new JMapper<>(SystemUser.class, CreateSystemUserRequest.class);
	@Override
	public SuccessResponse create(CreateSystemUserRequest request) {
		try {
			Optional<SystemUser> oSystemUser = systemUserRepo.findById(request.getSystemUserCode());
			if (oSystemUser.isPresent()) {
				return new FailResponse("Thông tin về người dùng này đã tồn tại !");
			} else {
				SystemUser systemUser = cmapper.getDestination(request);
				systemUserRepo.save(systemUser);
				return new CreateUserResponse(systemUser.getSystemUserCode(), "Thêm mới tài khoản người dùng thành công !");
			}
		} catch (Exception e) {
		}
		return new FailResponse("Đã có lỗi xãy ra !");
	}

	@Override
	public SuccessResponse softDeleteSystemUser(ListSystemUserCode systemUserCodes) {
		List<SystemUser> systemUsers = systemUserRepo.findAllById(systemUserCodes.getSystemUserCodes());
		if (systemUsers.isEmpty() || systemUsers == null) {
			return new FailResponse("Không tìm thấy tài khoản người dùng nào được chỉ định hoặc không có tài khoản người dùng nào được xóa !");
		}
		for (SystemUser systemUser : systemUsers) {
			systemUser.setIsDelete(true);
		}
		return new SuccessMessageResponse("Xóa thành công !");
	}

	@Override
	public List<SystemUserDto> findAllSystemUser() {
		List<SystemUser> systemUsers = systemUserRepo.findAllNoDelete();
		if (systemUsers.isEmpty() || systemUsers == null) {
			return null;
		}
		List<SystemUserDto> systemUserDtos = new ArrayList<>();
		for (SystemUser systemUser : systemUsers) {
			systemUserDtos.add(mapper.getDestination(systemUser));
		}
		return systemUserDtos;
	}

	@Override
	public SuccessResponse updateAllField(String systemUserCode, UpdateSystemUserRequest request) {
		try {
			Optional<SystemUser> oProduct = systemUserRepo.findById(systemUserCode);
			if (!oProduct.isPresent()) {
				return new FailResponse("Sản phẩm chưa tồn tại!");
			}
			if (oProduct.get().getIsDelete()) {
				return new FailResponse("Sản phẩm đã bị xóa !");
			} else {
				if(	   oProduct.get().getProductName().equals(request.getProductName())
					&& oProduct.get().getProductType().equals(request.getProductType())
					&& oProduct.get().getProducer().equals(request.getProducer())
					&& oProduct.get().getPrice().equals(request.getPrice())
					&& oProduct.get().getPathImage().equals(request.getPathImage())
					&& oProduct.get().getIsMaterial().equals(request.getIsMaterial())
					&& oProduct.get().getWeight().equals(request.getWeight())
					&& oProduct.get().getSize().equals(request.getSize())
					&& oProduct.get().getDescription().equals(request.getDescription())
					) {
					return new FailResponse("Sản phẩm không được sửa !");
				}
				Product product = oProduct.get();
				product = MapProduct.getProductFromUpdateProduct(request, product);
				productRepo.save(product);
				ProductDto dto = mapper.getDestination(product);
				dto.setModifiedDate(LocalDateTime.now());
				return new UpdateProductResponse(dto);
			}
		} catch (Exception e) {
		}
		return new FailResponse("Cập nhật sản phẩm thất bại !");
	}


}
